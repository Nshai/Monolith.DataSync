<?xml version="1.0" encoding="utf-8"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">

  {{- $domain := printf "%s-%s-%s.%s" (env "env_name" ) (env "iso_code") (env "env_instance") (env "dns_domain") }}

  <connectionStrings configBuilders="Env" xdt:Transform="Replace">
    <clear />
    <add name="read" connectionString="Server={{ env "database_instance" }};User Id={username};Password={password};database=workflow;enlist=False;Application Name=microservice-workflow;ApplicationIntent=ReadOnly;MultiSubnetFailover=True;" />
    <add name="write" connectionString="Server={{ env "database_instance" }};User Id={username};Password={password};database=workflow;enlist=False;Application Name=microservice-workflow;MultiSubnetFailover=True;" />
    <add name="afper" connectionString="Server={{ env "database_instance" }};User Id={username};Password={password};database=afper;enlist=False;Application Name=microservice-workflow;MultiSubnetFailover=True;" />
  </connectionStrings>

  <clientConfiguration>
    <serviceEndpoints>
      {{- if eq (env "env_name") "sub" }}
      <add name="crm" baseAddress="http://wiremock/crm/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="eventmanagement" baseAddress="http://wiremock/eventmanagement/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="portfolio" baseAddress="http://wiremock/portfolio/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      {{- else }}
      <add name="crm" baseAddress="https://monolith-crm.{{ $domain }}/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="eventmanagement" baseAddress="https://monolith-webhooks.{{ $domain }}/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="portfolio" baseAddress="https://monolith-portfolio.{{ $domain }}/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="workflow" baseAddress="https://microservice-workflow.{{ $domain }}/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="author" baseAddress="https://microservice-author.{{ $domain }}/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      <add name="nio" baseAddress="https://intelligent-office.{{ $domain }}/nio/rest/" timeout="60000" xdt:Transform="SetAttributes" xdt:Locator="Match(name)" />
      {{- end }}
    </serviceEndpoints>
  </clientConfiguration>

  {{- if keyExists "services/memcached/ip" }}
  <enyim.com>
    <memcached>
      <servers xdt:Transform="Replace">
        <add address="{{ key "services/memcached/ip" }}" port="11211" />
      </servers>
    </memcached>
  </enyim.com>
  {{- end }}

  <ResourceServerIdentityConfiguration SigningCertificateSubject="{{ key "certificates/signing" }}" IdentityServerBaseUrl="https://identity.{{ $domain }}" xdt:Transform="SetAttributes" />

  <aws region="{{ env "aws_region" }}" xdt:Transform="Replace"/>

  <AwsSettingsConfiguration AwsRegions="{{ env "aws_region" }}" xdt:Transform="Replace"/>

  <appSettings>
    <add key="enableHibernateProfiler" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="enableHibernateProfilerStackTrace" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="client.certificate.default.subjectname" value="{{ key "certificates/signing" }}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="encryption.certificate.default.subjectname" value="{{ key "certificates/encryption" }}" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="db.timeout" value="30" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ClientSettingsProvider.ServiceUri" value="" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="AWSProfileName" value=""  xdt:Transform="Remove" xdt:Locator="Match(key)" />
    <add key="dbprofile" xdt:Transform="Remove" xdt:Locator="Match(key)"/>
    {{- if eq (env "env_name") "sub" }}
    <add key="dbprofile" value="subsys" xdt:Transform="Insert" />
    <add key="CreateAfperDatabase" value="true" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    {{- else }}
    <add key="dbprofile" value="migrate" xdt:Transform="Insert" />
    {{- end }}
    {{- if keyExists "services/memcached/ip" }}
    <add key="cache.use" value="memcached" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    {{- end }}  
  </appSettings>

  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <sqlWorkflowInstanceStore xdt:Transform="Remove"/>
          <sqlWorkflowInstanceStore connectionStringName="afper" xdt:Transform="Insert"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>

  <applicationSettings>
    <Microservice.Workflow.Properties.Settings>
        <setting name="DatabaseObjectsFolder" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>../database</value>
        </setting>
        <setting name="DataScriptFolder" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>../database/data</value>
        </setting>
        <setting name="Instance" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>{{ env "iso_code" }}-{{ env "env_instance" }}</value>
        </setting>
        <setting name="Environment" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>{{ env "env_name" }}</value>
        </setting>
        <setting name="BaseAddress" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>http://*:80</value>
        </setting>
        <setting name="AltBaseAddress" serializeAs="String" xdt:Transform="Replace" xdt:Locator="Match(name)">
            <value>{{ env "service_url" }}</value>
        </setting>
    </Microservice.Workflow.Properties.Settings>
  </applicationSettings>

  <log4net xdt:Transform="Replace">
    <appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <mapping>
        <level value="FATAL" />
        <foreColor value="Red" />
      </mapping>
      <mapping>
        <level value="ERROR" />
        <foreColor value="Red, HighIntensity" />
      </mapping>
      <mapping>
        <level value="WARN" />
        <foreColor value="Yellow" />
      </mapping>
      <mapping>
        <level value="DEBUG" />
        <foreColor value="White" />
      </mapping>
      <mapping>
        <level value="INFO" />
        <foreColor value="Green" />
      </mapping>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
      </layout>
    </appender>
    <root>
      <level value="{{keyOrDefault "settings/applications/microservice-workflow/logLevel" "Info"}}" />
      <appender-ref ref="ColoredConsoleAppender" />
    </root>
    <logger name="NHibernate">
      <level value="{{keyOrDefault "settings/applications/microservice-workflow/nhibernateLogLevel" "WARN"}}" />
    </logger>
  </log4net>

 <Vault xdt:Transform="Replace">
    <Disabled value= "False" />
    <Address value="http://hashicorp-vault.hashicorp-vault.svc.cluster.local:8200" />
    <KubernetesJwtPath value="C:\var\run\secrets\kubernetes.io\serviceaccount\token" />
    <LeaseOffset value="86400000" />
    <SecretPaths>
    {{- if eq (env "env_name") "sub" }}
      <add key="ConnectionStrings:add[@name='read']/@connectionString" value="kv/database/credentials" />
      <add key="ConnectionStrings:add[@name='write']/@connectionString" value="kv/database/credentials" />
      <add key="ConnectionStrings:add[@name='afper']/@connectionString" value="kv/database/credentials" />
    {{- else }}
      <add key="ConnectionStrings:add[@name='read']/@connectionString" value="database/creds/microservice-workflow" />
      <add key="ConnectionStrings:add[@name='write']/@connectionString" value="database/creds/microservice-workflow" />
      <add key="ConnectionStrings:add[@name='afper']/@connectionString" value="database/creds/microservice-workflow" />
    {{- end }}
    </SecretPaths>
 </Vault>

</configuration>
